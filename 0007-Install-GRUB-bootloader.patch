From 405ea97f158ef97db4396c47a5302d3decbfad24 Mon Sep 17 00:00:00 2001
From: Lubomir Rintel <lkundrak@v3.sk>
Date: Fri, 6 Jun 2014 18:03:04 +0200
Subject: [PATCH 7/8] Install GRUB bootloader

---
 imgcreate/creator.py | 89 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 89 insertions(+)

diff --git a/imgcreate/creator.py b/imgcreate/creator.py
index e7bc95d..9864122 100644
--- a/imgcreate/creator.py
+++ b/imgcreate/creator.py
@@ -29,6 +29,7 @@ import parted
 import selinux
 import yum
 import rpm
+import rpmUtils
 
 from imgcreate.errors import *
 from imgcreate.fs import *
@@ -984,6 +985,7 @@ class PartitionedImageCreator(ImageCreator):
             self.__image_size_mb += p.size
 
         self.__partitions = None
+        self.__bootloader = None
 
     #
     # Properties
@@ -1108,3 +1110,90 @@ class PartitionedImageCreator(ImageCreator):
             self.__partitions.reverse()
             for par in self.__partitions:
                 par['disk'].cleanup()
+
+    def __create_bootconfig_grub(self, name, version, bootpar, ver, args):
+        arch = rpmUtils.arch.getBaseArch()
+        grub = self._instroot + '/usr/share/grub/' + arch + '-redhat'
+        for f in os.listdir(grub):
+            shutil.copy(grub + '/' + f, self._instroot + '/boot/grub/' + f)
+
+        cfg = "# grub.conf generated by python-imgcreate\n"
+        cfg += "#\n"
+        cfg += "# Note that you do not have to rerun grub after making changes to this file\n"
+        cfg += "# NOTICE:  You do not have a /boot partition.  This means that\n"
+        cfg += "#          all kernel and initrd paths are relative to /, eg.\n"
+        cfg += "#          root (hd0,0)\n"
+        cfg += "#          kernel /boot/vmlinuz-version ro root=/dev/xvda1 elevator=deadline console=tty0 console=ttyS0,115200\n"
+        cfg += "#          initrd /boot/initrd-[generic-]version.img\n"
+        cfg += "#boot=/dev/xvda\n"
+        cfg += "default=0\n"
+        cfg += "timeout=6\n"
+        cfg += "splashimage=(hd0,0)%s/grub/splash.xpm.gz\n" % (bootpar)
+        cfg += "hiddenmenu\n"
+        cfg += "title %s (%s)\n" % (name, ver)
+        cfg += "        root (hd0,0)\n"
+        cfg += "        kernel %s/vmlinuz-%s" % (bootpar, ver) + args + "\n"
+        cfg += "        initrd %s/initramfs-%s.img\n" % (bootpar, ver)
+
+        cfgf = open(self._instroot + '/boot/grub/grub.conf', "w")
+        cfgf.write(cfg)
+        cfgf.close()
+
+        os.symlink('../boot/grub/grub.conf', self._instroot + '/etc/grub.conf')
+
+    def __install_grub(self):
+        (dmapfd, dmap) = self._mkstemp('device-map')
+        os.write(dmapfd, '(hd0) ' + self._image)
+        os.close(dmapfd)
+        grub = subprocess.Popen(['/sbin/grub', '--batch', '--device-map', dmap], stdin=subprocess.PIPE)
+        grub.stdin.write("root (hd0,0)\n")
+        grub.stdin.write("setup (hd0)\n")
+        grub.stdin.write("halt\n")
+        grub.wait()
+        os.unlink(dmap)
+
+    def _create_bootconfig(self):
+        relf = open(self._instroot + '/etc/os-release', "r")
+        for line in relf:
+            kv = line.split('=')
+            if len(kv) != 2:
+                continue
+            if kv[0] == 'NAME':
+                name = kv[1].strip('"\n')
+            if kv[0] == 'VERSION':
+                version = kv[1].strip('"\n')
+        relf.close()
+
+        ver = os.listdir(self._instroot + "/lib/modules")[0]
+
+        bootpar = '/boot'
+        for par in self.__partitions:
+            mount = par['p'].mountpoint
+            if mount == '/':
+                uuid = par['disk'].uuid()
+            if mount == '/boot':
+                bootpar = ''
+
+        args = " ro"
+        args += " root=UUID=%s" % uuid
+        args += " rd_NO_LUKS"
+        args += " rd_NO_LVM"
+        args += " LANG=en_US.UTF-8"
+        args += " rd_NO_MD"
+        args += " SYSFONT=latarcyrheb-sun16"
+        args += " crashkernel=auto"
+        args += " KEYBOARDTYPE=pc"
+        args += " KEYTABLE=us"
+        args += " rd_NO_DM"
+        args += " rhgb"
+        args += " quiet"
+
+        if os.path.exists(self._instroot + '/sbin/grub'):
+            self.__bootloader = 'grub'
+        if self.__bootloader == 'grub':
+            self.__create_bootconfig_grub(name, version, bootpar, ver, args)
+
+    def _stage_final_image(self):
+        if self.__bootloader == 'grub':
+            self.__install_grub()
+        shutil.move(self._image, self._outdir + "/" + self.name + ".img")
-- 
1.9.3

